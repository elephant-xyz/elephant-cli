name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Run in dry-run mode (no actual release)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 24
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          HUSKY: 0

      - name: Run linting
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Build project
        run: npm run build

      - name: Run tests with coverage
        run: npm run test:coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 24
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          HUSKY: 0

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run security scan with better-npm-audit
        run: npx better-npm-audit audit --level moderate
        continue-on-error: true

  release:
    name: Release
    needs: [quality-checks, security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
          token: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 24
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          HUSKY: 0

      - name: Build project
        run: npm run build

      - name: Verify NPM token
        run: npm whoami
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "semantic-release-bot"
          git config --global user.email "semantic-release-bot@users.noreply.github.com"
          git config --global commit.gpgsign false

      - name: Dry Run Release
        if: github.event.inputs.dry-run == 'true'
        run: npx semantic-release --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      - name: Release
        if: github.event.inputs.dry-run != 'true'
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

  publish-github-packages:
    name: Publish to GitHub Packages
    needs: release
    runs-on: ubuntu-latest
    if: github.event.inputs.dry-run != 'true'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js for GitHub Packages
        uses: actions/setup-node@v6
        with:
          node-version: 24
          registry-url: 'https://npm.pkg.github.com'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          HUSKY: 0

      - name: Build project
        run: npm run build

      - name: Configure .npmrc for GitHub registry
        run: |
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" > .npmrc
          echo "@elephant-xyz:registry=https://npm.pkg.github.com" >> .npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current version
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Check if version exists on GitHub Packages
        id: gh-version-check
        continue-on-error: true
        run: |
          if npm view "@elephant-xyz/cli@${{ steps.package-version.outputs.version }}" --registry=https://npm.pkg.github.com 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to GitHub Packages
        if: steps.gh-version-check.outputs.exists == 'false'
        run: npm publish --registry=https://npm.pkg.github.com
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

